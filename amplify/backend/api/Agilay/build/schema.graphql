type User {
  id: ID!
  username: String!
  email: String!
  phoneNumber: String!
  bio: String
  followers: [User]
  posts(createdOn: ModelStringKeyConditionInput, filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Post {
  id: ID!
  description: String!
  image: String
  video: String
  comments(createdOn: ModelStringKeyConditionInput, filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection
  likes: [Like]
  upvotes: [Upvote]
  user: User
  userId: ID
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Comment {
  id: ID!
  likes: [Like]
  content: String!
  user: User
  userId: ID
  post: Post
  postId: ID
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Like {
  id: ID!
  user: User
  userId: ID
  post: Post
  postId: ID
  comment: Comment
  commentId: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Upvote {
  id: ID!
  user: User
  userId: ID
  post: Post
  postId: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  email: ModelStringInput
  phoneNumber: ModelStringInput
  bio: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  getLike(id: ID!): Like
  listLikes(filter: ModelLikeFilterInput, limit: Int, nextToken: String): ModelLikeConnection
  getUpvote(id: ID!): Upvote
  listUpvotes(filter: ModelUpvoteFilterInput, limit: Int, nextToken: String): ModelUpvoteConnection
}

input ModelUserConditionInput {
  username: ModelStringInput
  email: ModelStringInput
  phoneNumber: ModelStringInput
  bio: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

input CreateUserInput {
  id: ID
  username: String!
  email: String!
  phoneNumber: String!
  bio: String
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
  phoneNumber: String
  bio: String
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
  createLike(input: CreateLikeInput!, condition: ModelLikeConditionInput): Like
  updateLike(input: UpdateLikeInput!, condition: ModelLikeConditionInput): Like
  deleteLike(input: DeleteLikeInput!, condition: ModelLikeConditionInput): Like
  createUpvote(input: CreateUpvoteInput!, condition: ModelUpvoteConditionInput): Upvote
  updateUpvote(input: UpdateUpvoteInput!, condition: ModelUpvoteConditionInput): Upvote
  deleteUpvote(input: DeleteUpvoteInput!, condition: ModelUpvoteConditionInput): Upvote
}

input ModelSubscriptionUserFilterInput {
  id: ModelSubscriptionIDInput
  username: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  phoneNumber: ModelSubscriptionStringInput
  bio: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
}

type Subscription {
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["deleteUser"])
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: ["deletePost"])
  onCreateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["createComment"])
  onUpdateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["updateComment"])
  onDeleteComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: ["deleteComment"])
  onCreateLike(filter: ModelSubscriptionLikeFilterInput): Like @aws_subscribe(mutations: ["createLike"])
  onUpdateLike(filter: ModelSubscriptionLikeFilterInput): Like @aws_subscribe(mutations: ["updateLike"])
  onDeleteLike(filter: ModelSubscriptionLikeFilterInput): Like @aws_subscribe(mutations: ["deleteLike"])
  onCreateUpvote(filter: ModelSubscriptionUpvoteFilterInput): Upvote @aws_subscribe(mutations: ["createUpvote"])
  onUpdateUpvote(filter: ModelSubscriptionUpvoteFilterInput): Upvote @aws_subscribe(mutations: ["updateUpvote"])
  onDeleteUpvote(filter: ModelSubscriptionUpvoteFilterInput): Upvote @aws_subscribe(mutations: ["deleteUpvote"])
}

type ModelPostConnection {
  items: [Post]!
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDInput
  description: ModelStringInput
  image: ModelStringInput
  video: ModelStringInput
  userId: ModelIDInput
  createdOn: ModelStringInput
  updatedOn: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input ModelPostConditionInput {
  description: ModelStringInput
  image: ModelStringInput
  video: ModelStringInput
  userId: ModelIDInput
  createdOn: ModelStringInput
  updatedOn: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

input CreatePostInput {
  id: ID
  description: String!
  image: String
  video: String
  userId: ID
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
}

input UpdatePostInput {
  id: ID!
  description: String
  image: String
  video: String
  userId: ID
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
}

input DeletePostInput {
  id: ID!
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionIDInput
  description: ModelSubscriptionStringInput
  image: ModelSubscriptionStringInput
  video: ModelSubscriptionStringInput
  userId: ModelSubscriptionIDInput
  createdOn: ModelSubscriptionStringInput
  updatedOn: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
}

type ModelCommentConnection {
  items: [Comment]!
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  userId: ModelIDInput
  postId: ModelIDInput
  createdOn: ModelStringInput
  updatedOn: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input ModelCommentConditionInput {
  content: ModelStringInput
  userId: ModelIDInput
  postId: ModelIDInput
  createdOn: ModelStringInput
  updatedOn: ModelStringInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

input CreateCommentInput {
  id: ID
  content: String!
  userId: ID
  postId: ID
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
}

input UpdateCommentInput {
  id: ID!
  content: String
  userId: ID
  postId: ID
  createdOn: AWSDateTime
  updatedOn: AWSDateTime
}

input DeleteCommentInput {
  id: ID!
}

input ModelSubscriptionCommentFilterInput {
  id: ModelSubscriptionIDInput
  content: ModelSubscriptionStringInput
  userId: ModelSubscriptionIDInput
  postId: ModelSubscriptionIDInput
  createdOn: ModelSubscriptionStringInput
  updatedOn: ModelSubscriptionStringInput
  and: [ModelSubscriptionCommentFilterInput]
  or: [ModelSubscriptionCommentFilterInput]
}

type ModelLikeConnection {
  items: [Like]!
  nextToken: String
}

input ModelLikeFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  postId: ModelIDInput
  commentId: ModelIDInput
  and: [ModelLikeFilterInput]
  or: [ModelLikeFilterInput]
  not: ModelLikeFilterInput
}

input ModelLikeConditionInput {
  userId: ModelIDInput
  postId: ModelIDInput
  commentId: ModelIDInput
  and: [ModelLikeConditionInput]
  or: [ModelLikeConditionInput]
  not: ModelLikeConditionInput
}

input CreateLikeInput {
  id: ID
  userId: ID
  postId: ID
  commentId: ID
}

input UpdateLikeInput {
  id: ID!
  userId: ID
  postId: ID
  commentId: ID
}

input DeleteLikeInput {
  id: ID!
}

input ModelSubscriptionLikeFilterInput {
  id: ModelSubscriptionIDInput
  userId: ModelSubscriptionIDInput
  postId: ModelSubscriptionIDInput
  commentId: ModelSubscriptionIDInput
  and: [ModelSubscriptionLikeFilterInput]
  or: [ModelSubscriptionLikeFilterInput]
}

type ModelUpvoteConnection {
  items: [Upvote]!
  nextToken: String
}

input ModelUpvoteFilterInput {
  id: ModelIDInput
  userId: ModelIDInput
  postId: ModelIDInput
  and: [ModelUpvoteFilterInput]
  or: [ModelUpvoteFilterInput]
  not: ModelUpvoteFilterInput
}

input ModelUpvoteConditionInput {
  userId: ModelIDInput
  postId: ModelIDInput
  and: [ModelUpvoteConditionInput]
  or: [ModelUpvoteConditionInput]
  not: ModelUpvoteConditionInput
}

input CreateUpvoteInput {
  id: ID
  userId: ID
  postId: ID
}

input UpdateUpvoteInput {
  id: ID!
  userId: ID
  postId: ID
}

input DeleteUpvoteInput {
  id: ID!
}

input ModelSubscriptionUpvoteFilterInput {
  id: ModelSubscriptionIDInput
  userId: ModelSubscriptionIDInput
  postId: ModelSubscriptionIDInput
  and: [ModelSubscriptionUpvoteFilterInput]
  or: [ModelSubscriptionUpvoteFilterInput]
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
